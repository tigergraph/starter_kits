CREATE QUERY company_holders(vertex<Company> company, uint step) 
  FOR GRAPH EnterpriseGraph syntax v1 {
  /**
   * company_holders query finds all key investors of a company within several steps.
	 * --- Dataset has been shrunk on Nov.20th,2020 ---
   * Some interesting input parameters you can try:
   * 1. company: Hospice Mocha Frame, step: 5
	 * 2. company: Psychoanalyst Purse Prior, step: 4
	 * 3. company: Hospice Loyalty Decongestant, step: 2
	 * 4. company: Discipline Base Perfume, step 1
	 * 5. company: Discipline Base Perfume, step 2
	 * 6. company: Discipline Base Perfume, step 3
	 * 7. company: Discipline Base Perfume, step 4
   */

	// @visited is used to mark visited vertices
  OrAccum @visited = false;
	// @@edge_set is used to hold all touched edges
  SetAccum<edge> @@edge_set;

  int loop_step;

  // limit the maximum traverse steps
  IF (step > 8) THEN
    loop_step = 8;
  ELSE
    loop_step = step;
  END;

  // Start from the input company
  start (any) = { company };

	// vertex_result contains all vertices we touched during traversal
  vertex_result = start;

	// Mark input company as visited
  start =  SELECT s
              FROM start:s
              ACCUM s.@visited = true;

	// Traverse multiple steps
  WHILE (true) LIMIT loop_step DO
		// Find the investors (either people or companies) that is a key investor (control_type == "holding")
    start =  SELECT tgt
                FROM start
                     -((PersonInvestCompany | CompanyInvestCompany): e)-
                     (Person | Company): tgt
                WHERE (e.control_type == "holding") AND tgt.@visited == FALSE
                ACCUM @@edge_set += e
                POST-ACCUM tgt.@visited = TRUE
                ;
		// Merge touched vertices into the result
    vertex_result = vertex_result union start;
  END;

	// Print result as a graph
  PRINT vertex_result;
  PRINT @@edge_set;
}