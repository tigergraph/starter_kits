CREATE QUERY algo_page_rank(FLOAT max_change = 0.001, INT max_iter = 25, 
        FLOAT damping = 0.85, INT output_limit) FOR GRAPH MyGraph SYNTAX V2 { 

	# Compute the pageRank score for each vertex in the GRAPH
# In each iteration, compute a score for each vertex:
#   score = (1-damping) + damping*sum(received scores FROM its neighbors).
# The pageRank algorithm stops when either of the following is true:
#  a) it reaches max_iter iterations;
#  b) the max score change for any vertex compared to the last iteration <= max_change.

        TYPEDEF TUPLE<vertex Vertex_ID, FLOAT score> Vertex_Score;
        HeapAccum<Vertex_Score>(output_limit, score DESC) @@top_scores;
        MaxAccum<float> @@max_diff = 9999; # max score change in an iteration
        SumAccum<float> @received_score = 0; # sum of scores each vertex receives FROM neighbors
        SumAccum<float> @score = 1;   # Initial score for every vertex is 1.
        SetAccum<EDGE> @@edge_set;                   # list of all edges, if display is needed

        start = {Prescriber.*};   #  start with all vertices of specified type(s)
	      V (ANY) = {};
        WHILE @@max_diff > max_change LIMIT max_iter DO
                @@max_diff = 0;
                V = SELECT s
                    FROM start:s -(referral>:e)- :t
                    ACCUM t.@received_score += s.@score/(s.outdegree("referral")) 
                    POST-ACCUM s.@score = (1.0-damping) + damping * s.@received_score,
                               s.@received_score = 0,
                               @@max_diff += abs(s.@score - s.@score');
        END; # END WHILE loop


        IF output_limit > 0 THEN
                V = SELECT s FROM start:s
                    POST-ACCUM @@top_scores += Vertex_Score(s, s.@score),s.pageRank=s.@score;
                PRINT @@top_scores;
        END;
	
}