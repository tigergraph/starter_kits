CREATE QUERY scc_enhanced (INT iter = 500, INT iter_wcc = 5, INT top_k_dist = 10) 
        FOR GRAPH MyGraph SYNTAX V2 {
/* This query detects strongly connected components based on the following papers:
 * https://www.sandia.gov/~apinar/papers/irreg00.pdf
 * https://www.sciencedirect.com/science/article/pii/S0743731505000535
 * https://stanford-ppl.github.io/website/papers/sc13-hong.pdf

 * iter: number of iteration of the algorithm
 * iter_wcc: find weakly connected components for the active vertices in this iteration, since the largest sccs are already found after several iterations; usually a small number(3 to 10)
 * top_k_dist: top k result in scc distribution

 * DISTRIBUTED QUERY mode for this query is supported from TG 2.4.
 */
        TYPEDEF TUPLE <INT csize, INT num> Cluster_Num;
        MapAccum<INT, INT> @@cluster_size_map, @@cluster_dist_map;
        HeapAccum<Cluster_Num>(top_k_dist, csize DESC) @@cluster_dist_heap;
        OrAccum @is_forward, @is_backward, @detached, @has_pos_indegree, @has_pos_outdegree, @wcc_active;
        SumAccum<INT> @cid, @vid;
        MinAccum<INT> @@min_vid, @wcc_id_curr, @wcc_id_prev;
        SumAccum<STRING> @flag;
        MapAccum<INT, MinAccum<INT>> @@f_cid_map, @@b_cid_map, @@n_cid_map, @@s_cid_map;
	      MapAccum<INT, ListAccum<VERTEX>> @@component_lists;
        INT i = 1;
        v_all = {Prescriber.*};
  	    tmp(ANY) ={};

        active = SELECT s
                FROM v_all:s
                ACCUM s.@vid = getvid(s),
                      @@min_vid += getvid(s)
                POST-ACCUM s.@cid = @@min_vid;
  
        WHILE active.size()>0 LIMIT iter DO
                PRINT i;
                // trim size 1 SCC
                //IF i < iter_end_trim THEN
                WHILE TRUE DO   
                        tmp =  SELECT s
                               FROM active:s -((referral>):e) - :t
                               WHERE t.@detached == FALSE AND s.@cid == t.@cid
                               ACCUM s.@has_pos_outdegree = TRUE;
  
                        tmp =  SELECT s
                               FROM active:s -((reverse_referral>):e) - :t
                               WHERE t.@detached == FALSE AND s.@cid == t.@cid
                               ACCUM s.@has_pos_indegree = TRUE;
                        trim_set = SELECT s
                               FROM active:s
                               WHERE s.@has_pos_indegree == FALSE OR s.@has_pos_outdegree == FALSE
                               ACCUM s.@detached = TRUE,
                                     s.@cid = s.@vid;
                
                        print trim_set.size();
                        IF trim_set.size() == 0 THEN  // no single SCC anymore, terminate the while loop
                                BREAK;
                        END;
                        active = SELECT s
                                 FROM active:s 
                                 WHERE s.@detached == FALSE
                                 ACCUM @@n_cid_map += (s.@cid -> s.@vid)
                                 POST-ACCUM s.@cid = @@n_cid_map.get(s.@cid),
                                            s.@has_pos_indegree = FALSE,
                                            s.@has_pos_outdegree = FALSE; 
                        @@n_cid_map.clear();
                END;
                //END;
                // get WCC
                IF i == iter_wcc THEN
                        active = SELECT s
                                 FROM active:s
                                 POST-ACCUM s.@wcc_id_curr = s.@vid,
                                            s.@wcc_id_prev = s.@vid;
                        curr = active;
                        WHILE (curr.size()>0) DO
                                curr = SELECT t
                                       FROM curr:s -((referral>|reverse_referral>):e)- :t
                                       WHERE s.@cid == t.@cid AND t.@detached == FALSE
                                       ACCUM t.@wcc_id_curr += s.@wcc_id_prev // If s has a smaller id than t, copy the id to t
                                       POST-ACCUM
                                                CASE WHEN t.@wcc_id_prev != t.@wcc_id_curr THEN // If t's id has changed
                                                          t.@wcc_id_prev = t.@wcc_id_curr,
                                                          t.@wcc_active = true
                                                ELSE 
                                                          t.@wcc_active = false
                                                END
                                        HAVING t.@wcc_active == true;       
                        END;
                        active = SELECT s
                                 FROM active:s
                                 ACCUM s.@cid = s.@wcc_id_curr;
                END;
                i = i + 1;
  
                pivots = SELECT s
                         FROM active:s 
                         WHERE s.@cid == s.@vid
                         ACCUM s.@is_forward = TRUE,
                               s.@is_backward = TRUE;
          
                // mark forward set
                curr = pivots;
                WHILE curr.size()>0 DO
                        curr = SELECT t 
                               FROM curr:s -((referral>):e)-:t  // edge
                               WHERE t.@detached == FALSE AND t.@is_forward == FALSE AND s.@cid == t.@cid // not traversed
                               ACCUM t.@is_forward = TRUE;
                END;
          
                // mark backward set
                curr = pivots;
                WHILE curr.size()>0 DO
                        curr = SELECT t 
                               FROM curr:s -((reverse_referral>):e)-:t  // reverse edge
                               WHERE t.@detached == FALSE AND t.@is_backward == FALSE AND s.@cid == t.@cid // not traversed
                               ACCUM t.@is_backward = TRUE;
                END;
          
                active = SELECT s
                         FROM active:s 
                         ACCUM IF s.@is_forward == TRUE AND s.@is_backward == TRUE THEN  // scc
                                       s.@detached = TRUE,
                                       @@s_cid_map += (s.@cid -> s.@vid)
                               ELSE IF s.@is_forward == TRUE THEN  // forward set   
			               @@f_cid_map += (s.@cid -> s.@vid)
			       ELSE IF s.@is_backward == TRUE THEN    // backward set
				       @@b_cid_map += (s.@cid -> s.@vid)
			       ELSE 
			               @@n_cid_map += (s.@cid -> s.@vid)   // null set
		               END	
                          POST-ACCUM IF s.@is_forward == TRUE AND s.@is_backward == TRUE THEN  // scc
                                             s.@cid = @@s_cid_map.get(s.@cid)
                                     END,
                                     IF s.@is_forward == TRUE THEN
                                             IF s.@is_backward == FALSE THEN   // forward set
                                                     s.@cid = @@f_cid_map.get(s.@cid)
                                             END
                                     ELSE
                                             IF s.@is_backward == TRUE THEN    // backward set
                                                     s.@cid = @@b_cid_map.get(s.@cid) 
                                             ELSE                              // null set
                                                     s.@cid = @@n_cid_map.get(s.@cid) 
                                             END
                                     END,
                                     s.@is_forward = FALSE,
                                     s.@is_backward = FALSE
                           HAVING s.@detached == FALSE;

                @@s_cid_map.clear();
                @@f_cid_map.clear();
                @@b_cid_map.clear();
                @@n_cid_map.clear();
        END;
  
  // result
	v_all = SELECT s
        FROM v_all:s 
        POST-ACCUM @@cluster_size_map += (s.@cid -> 1), 
	      s.communityId = s.@cid, // added
	      @@component_lists += (s.@cid -> s) // added
	;
  
	FOREACH (cid, csize) IN @@cluster_size_map DO
		@@cluster_dist_map += (csize -> 1);
	END;
	FOREACH (csize, number) IN @@cluster_dist_map DO
		@@cluster_dist_heap += Cluster_Num(csize, number);
	END;
	
  PRINT @@cluster_dist_heap;
  PRINT @@component_lists;
  PRINT v_all [v_all.@cid];


}