CREATE QUERY page_rank_pers (SET<VERTEX> source, FLOAT max_change, INT max_iter, 
        FLOAT damping, INT output_limit) FOR GRAPH MyGraph SYNTAX V2 {
# Compute the pageRank score for each vertex in the GRAPH, given a set of source vertices
# In each iteration, compute a score for activated vertices if they are source vertices:
#   score = (1-damping) + damping*sum(received scores FROM its neighbors).
# If they are not source vertices, then score = damping*sum(received scores FROM its neighbors).
# The personalized pageRank algorithm stops when either of the following is true:
#  a) it reaches max_iter iterations;
#  b) the max score change for any vertex compared to the last iteration <= max_change.

        TYPEDEF TUPLE<vertex Vertex_ID, FLOAT score> Vertex_Score;
        HeapAccum<Vertex_Score>(output_limit, score DESC) @@top_scores;
        MaxAccum<float> @@max_diff = 9999; # max score change in an iteration
        SumAccum<float> @received_score = 0; # sum of scores each vertex receives FROM neighbors
        SumAccum<float> @score = 0;   # Initial score for every vertex is 0.
        SetAccum<EDGE> @@edge_set;                   # list of all edges, if display is needed
        OrAccum @is_source;   
       
        start = {source};   #  start with a set of vertices
        start = SELECT s
                FROM  start:s
                ACCUM s.@score = 1,   # Only set score of source vertices to 1
                      s.@is_source = true;
        total = start;
        WHILE @@max_diff > max_change LIMIT max_iter DO
              @@max_diff = 0;
              V_tmp = SELECT t      # Only update score for activated vertices
                      FROM start:s -(flight_to>:e)- :t
                      ACCUM t.@received_score += s.@score/(s.outdegree("flight_to"));
              T = start UNION V_tmp;
              start = SELECT s
                      FROM T:s
                      POST-ACCUM
                          # For source vertices, if it's activated, then add damping; if not activated, do not need to update
                          IF s.@is_source == true
                          THEN s.@score = (1.0-damping) + damping * s.@received_score
                          ELSE s.@score = damping * s.@received_score
                          END,
                          s.@received_score = 0,
                          @@max_diff += abs(s.@score - s.@score');
              total = total UNION T; 
        END; # END WHILE loop

        IF output_limit > 0 THEN
                total = SELECT s FROM total:s
                        ACCUM @@top_scores += Vertex_Score(s, s.@score);
                PRINT @@top_scores;
        END;

}