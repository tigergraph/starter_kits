CREATE QUERY bc_subquery (VERTEX source, INT max_hops) FOR GRAPH MyGraph RETURNS(MapAccum<vertex, float>) SYNTAX V2 {
/* The TigerGraph implementation is based on A Faster Algorithm for Betweenness Centrality by Ulrik Brandes, Journal of Mathematical Sociology 25(2):163-177, (2001). According to the algorithm, sigma is the number of shortest paths from source; delta is the pair dependency from source; and dist is the shortest distance from source. The subquery returns a map of (s.id->s.@delta)
*/
  SumAccum<float> @sigma;              
	SumAccum<float> @delta;              
	MaxAccum<int> @dist;                 
	SumAccum<int> @@curr_dist = 0;
	MapAccum<vertex, float> @@delta_map;   
	
	all = {any};
	start = {source};
	start = SELECT s FROM start:s 
	        ACCUM s.@sigma = 1, s.@dist = 0;
 
# traverse in the order of increasing distance and calculate @sigma and @dist
	WHILE (start.size()>0) LIMIT max_hops DO		# explore up to (max_hops) hops FROM s
	  @@curr_dist += 1;
	  start = SELECT t FROM start:s-(flight_to>:e)-:t
	          WHERE t.@dist < 0
	          ACCUM t.@sigma += s.@sigma,
	                t.@dist = @@curr_dist;  
	END;
  
	@@curr_dist += -1;
	start = SELECT s FROM all:s
	        WHERE s.@dist == @@curr_dist;
	
# traverse in the order of non-increasing distance and calculate @delta
	WHILE (@@curr_dist>0) DO
	  @@curr_dist += -1;
	  start = SELECT s FROM start:s -(flight_to>:e)-:t
	          WHERE t.@dist == s.@dist-1
	          ACCUM t.@delta += t.@sigma/s.@sigma*(1+s.@delta);
	          
	  start = SELECT s FROM all:s
	          WHERE s.@dist == @@curr_dist;	         
	END;
	
	start = SELECT s FROM all:s
	        ACCUM
	          CASE WHEN s!=source THEN
	            @@delta_map += (s->s.@delta/2)
	          ELSE @@delta_map += (s->0)
	          END;

	return @@delta_map;

 }