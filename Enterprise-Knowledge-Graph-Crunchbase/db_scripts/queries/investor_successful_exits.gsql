CREATE QUERY investor_successful_exits(STRING investor_name="Accel Partners",
    STRING investor_type="financialORG", INT years=3)
    FOR GRAPH CrunchBasePre_2013 SYNTAX V2 {
  /*
    Data is from Crunchbase 2013 Snapshot under the
    Creative Commons Attribution License [CC-BY].
    The starter kit dataset was reduced on Nov. 20th, 2020.

    Find a given investor's successful investment exits (IPO, acquisition) 
    within a given number of years. If the number of years is 4, we include
    the successful exits happening within 4 years after their investments.

    investor_type should be one of {"company", "person", "financialORG"}
  
    Steps:
      (1) Find the funding rounds which the investor participated in.
      (2) Find the companies funded by the rounds in step(1).
      (3) Find the exit info of companies discovered in step(2).

    Traversal pattern:
      company/fiancialORG/person -> funding_rounds -> company -> IPO/acquire

    Sample inputs:
    1.  investor_name: General Electric ; investor_type: company; years: 2
    2.  investor_name: Accel Partners; investor_type: financialORG; years: 5
    3.  investor_name: Ted Leonsis ; investor_type: person; years: 3
  */
  
    SetAccum<VERTEX> @parent_vertex_set;
    SetAccum<EDGE> @parent_edge_set;
    SetAccum<VERTEX> @@result_vertex_set;
    SetAccum<EDGE> @@result_edge_set;
    SetAccum<VERTEX> @@parents;
    MinAccum<DATETIME> @min_invested_time; // earliest time invested by investor
    INT SECS_PER_YR = 31556952; // accounting for leap years

    // Prep: Initialize the search differently depending on investor_type
    start (ANY) = {};
    CASE lower(trim(investor_type))
        WHEN "person"       THEN start = {person.*};
        WHEN "company"      THEN start = {company.*};
        WHEN "financialorg" THEN start = {financialORG.*};
    END;

    // Prep: Find the investor with a name matching input 'investor_name'
    investor (ANY) = SELECT inv
        FROM start :inv
        WHERE ( inv.type == "person"
                AND lower(trim(inv.fullname)) == lower(trim(investor_name))
            ) OR lower(trim(inv.name)) == lower(trim(investor_name));

    // 1. Find funding rounds that the investor has participated in
    Funding_rounds = SELECT tgt
        FROM investor :s - ((investment_from_company | investment_from_person | 
            investment_from_financialORG) :e) - funding_rounds :tgt
        ACCUM
            tgt.@parent_vertex_set += s,   
            tgt.@parent_edge_set += e;

    // 2. Get companies invested in in the funding rounds from step(1)
    invested_companies = SELECT tgt
        FROM Funding_rounds :s - ((company_funding_rounds) :e) - company :tgt
        ACCUM
            tgt.@parent_vertex_set += s,
            tgt.@parent_edge_set += e,
            tgt.@min_invested_time += s.funded_at;
            
    // 3. Determine which companies from step(2) have IPOed or been Acquired
    IPO_acquired_companies = SELECT tgt
        FROM invested_companies :s - ((company_ipo | acquired_by>) :e) - :tgt
        ACCUM
            tgt.@parent_vertex_set += s,
            tgt.@parent_edge_set += e,
            // See if IPO occured within `years` after investor's investment
            IF (e.type == "company_ipo"
                AND datetime_diff(tgt.public_at, s.@min_invested_time) > 0
                AND datetime_diff(
                tgt.public_at, s.@min_invested_time) <= years * SECS_PER_YR)
            // See if Acquisition occured within `years` of investment
            OR (e.type == "acquired_by"
                AND datetime_diff(e.acquired_at, s.@min_invested_time) > 0
                AND datetime_diff(
                e.acquired_at, s.@min_invested_time) <= years * SECS_PER_YR)
            THEN @@result_vertex_set += tgt
            END;

    // Trace back from exits to investor, to get output vertices & edges
    children = {@@result_vertex_set};
    PRINT children.size() as Num_Successful_Exits;
    WHILE(children.size() > 0) DO
        start = SELECT s
                FROM children :s
                ACCUM
                    @@parents += s.@parent_vertex_set,
                    @@result_edge_set += s.@parent_edge_set;

        @@result_vertex_set += @@parents;
        children = {@@parents};
        @@parents.clear();
    END;

    // Output the results
    results = {@@result_vertex_set}; // convert so to output more that just id
    //PRINT results.size() AS num_vertices;
    //PRINT @@result_edge_set.size() AS num_edges;
    PRINT investor;    
    PRINT results;
    PRINT @@result_edge_set;
}